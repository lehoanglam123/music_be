<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.security.repository.SongRepository">
    <select id="getAll" resultMap="search" resultType="com.spring.security.entity.SongSearchEntity">
        SELECT
            `song_id`,
            `song_name`,
            `genre_id`,
            `artist_id`,
            `album_id`,
            `release_year`,
            `audio`,
            `lyrics`,
            `duration`,
            `account_id`
        FROM `music`.`song`
        WHERE 1=1;
    </select>

    <insert id="insertSong" useGeneratedKeys="true" keyProperty="id" parameterType="com.spring.security.entity.SongEntity" >
        INSERT INTO `music`.`songs`
            (`song_name`,
            `genre_id`,
            `artist_id`,
            `album_id`,
            `release_year`,
            `audio`,
            `lyrics`,
            `duration`)
        VALUES
            (#{songName},
            #{genreId},
            #{artistId},
            #{albumId},
            DATE(NOW()),
            #{audio},
            #{lyrics},
            #{duration});
    </insert>

    <insert id="insertLyricsBatch" parameterType="com.spring.security.request.ListLyrics">
        INSERT INTO lyrics (song_id,timestamp, lyric)
        VALUES
        <foreach collection="lyricsList" item="item" separator=",">
            (#{songId} ,#{item.timestamp}, #{item.lyric})
        </foreach>
    </insert>

    <!-- GET SONG BY ID -->
    <select id="getListSongByUserId" resultType="com.spring.security.entity.SongSearchEntity"
            resultMap="search">
        SELECT
            s.`song_id`,
            s.`song_name`,
            s.`album_id`,
            s.`artist_id`,
            g.`genre_name`,
            s.`release_year`,
            s.`audio`,
            s.`lyrics`
            s.`duration`
        FROM
            `music`.`songs` s
        LEFT JOIN
            `music`.`genres` g ON s.`genre_id` = g.`genre_id`
        LEFT JOIN
            `music`.`accounts` u ON s.`account_id` = u.`account_id`
        WHERE
            s.`account_id`=#{id};
    </select>

    <!-- SEARCH SONG BY NAME -->

    <select id="searchSongByName" resultMap="songResultMap">
        SELECT
            s.song_id AS songId,
            s.song_name AS songName,
            s.duration AS duration,
            s.audio,
            l.timestamp AS timestamp,
            l.lyric AS lyric
        FROM
            songs s
            LEFT JOIN
            lyrics l ON s.song_id = l.song_id
        WHERE
            s.song_name LIKE CONCAT('%', #{songName, jdbcType=VARCHAR}, '%')
            OR EXISTS (
                SELECT 1
                FROM artists a
                WHERE a.artist_id = s.artist_id
                AND a.artist_name LIKE CONCAT('%', #{songName, jdbcType=VARCHAR}, '%')
                )
        ORDER BY s.song_id
    </select>

    <!--********************-->

    <!--************** -->

    <!--UPDATE SONG-->
    <select id="getSongById" resultType="com.spring.security.model.Song"
            resultMap="result">
        SELECT
            `song_id`,
            `song_name`,
            `artist_id`,
            `album_id`,
            `genre_id`,
            `release_year`,
            LEFT(`audio`, 256),
            `duration`,
            `account_id`
        FROM
            `music`.`songs`
        WHERE
            `song_id` = #{id};
    </select>

    <select id="getSongByName" resultType="com.spring.security.model.Song"
            resultMap="result">
        SELECT
            `song_id`,
            `song_name`,
            `genre_id`,
            `artist_id`,
            `album_id`,
            `release_year`,
            LEFT(`audio`, 256),
            `duration`,
            `lyrics`,
            `status`,
            `account_id`
        FROM
            `music`.`songs`
        WHERE
            `song_id` = #{songName};
    </select>

    <update id="updateSongById" parameterType="com.spring.security.model.Song">
        UPDATE
            `music`.`songs`
        SET
            `song_name`=#{songName},
            `genre_id`=#{genreId},
            `artist_id`=#{artistId}
        WHERE
            `song_id`=#{id};
    </update>
    <!--***********-->

    <!--DELETE SONG-->
    <select id="getListSongByList" resultType="int" parameterType="com.spring.security.request.ListSongId">
        SELECT
            `song_id`
        FROM
            `music`.`songs`
        WHERE
            `song_id` IN
        <if test="listSongId != null and listSongId.size() > 0">
            <foreach collection="listSongId" item="listId" open="("
                     close=")" separator=",">
                ${listId}
            </foreach>
        </if>
    </select>

    <delete id="deleteSongByListId">
        DELETE FROM `music`.`songs`
        WHERE `song_id`
        IN
        <if test="listSongId != null and listSongId.size() > 0">
            <foreach collection="listSongId" item="listId" open="("
                     close=")" separator=",">
                ${listId}
            </foreach>
        </if>
    </delete>
    <!--***********-->

    <resultMap id="result" type="Song">
        <result property="id" column="song_id"/>
        <result property="songName" column="song_name"/>
        <result property="genreId" column="genre_id"/>
        <result property="artistId" column="artist_id"/>
        <result property="albumId" column="album_id"/>
        <result property="releaseYear" column="release_year"/>
        <result property="audio" column="audio"/>
        <result property="lyrics" column="lyrics"/>
        <result property="duration" column="duration"/>
        <result property="status" column="status"/>
        <result property="accountId" column="account_id"/>
    </resultMap>

    <resultMap id="search" type="Song">
        <result property="id" column="song_id"/>
        <result property="songName" column="song_name"/>
        <result property="genreId" column="genre_id"/>
        <result property="artistId" column="artist_id"/>
        <result property="albumId" column="album_id"/>
        <result property="releaseYear" column="release_year"/>
        <result property="audio" column="audio"/>
        <result property="lyrics" column="lyrics"/>
        <result property="duration" column="duration"/>
        <result property="status" column="status"/>
        <result property="accountId" column="account_id"/>
    </resultMap>

    <resultMap id="songResultMap" type="com.spring.security.entity.SongSearchEntity">
        <id property="id" column="songId" />
        <result property="songName" column="songName" />
        <result property="duration" column="duration" />
        <result property="audio" column="audio" />
        <collection property="lyrics" ofType="com.spring.security.model.Lyrics">
            <result property="timestamp" column="timestamp" />
            <result property="lyric" column="lyric" />
        </collection>
    </resultMap>



</mapper>